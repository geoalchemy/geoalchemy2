>>> import binascii

A roundtrip of this quite complex geometry should keep the structure alive:
GEOMETRYCOLLECTION(
MULTIPOINT ((10 40), (40 30), (20 20), (30 10)),
MULTILINESTRING ((10 10, 20 20, 10 40), (40 40, 30 30, 40 20, 30 10)),
POINT(4 6),
MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)), ((20 35, 45 20, 30 5, 10 10, 10 30, 20 35), (30 20, 20 25, 20 15, 30 20))),
POLYGON ((35 10, 10 20, 15 40, 45 45, 35 10), (20 30, 35 35, 30 20, 20 30)),
LINESTRING(4 6,7 10))

This Geometry was transformed into the byte string using:
class Something(SQLADeclarativeBase):
    something_else = Column(Geography(geometry_type='GEOMETRYCOLLECTION'))
and
    rows = session.query(
         func.ST_AsBinary(func.ST_GeomFromWKB(Something.id)),
         func.ST_AsBinary(func.ST_GeomFromWKB(Something.something_else))).all()
    for row in rows:
        print(binascii.hexlify(row[1]))



>>> data = (b'010700000006000000010400000004000000010100000000000000000024400000000000004440010100000000000000000044400000000000003e4001010000000000000000003440000000000000344001010000000000000000003e400000000000002440010500000002000000010200000003000000000000000000244000000000000024400000000000003440000000000000344000000000000024400000000000004440010200000004000000000000000000444000000000000044400000000000003e400000000000003e40000000000000444000000000000034400000000000003e40000000000000244001010000000000000000001040000000000000184001060000000200000001030000000100000004000000000000000000444000000000000044400000000000003440000000000080464000000000008046400000000000003e40000000000000444000000000000044400103000000020000000600000000000000000034400000000000804140000000000080464000000000000034400000000000003e4000000000000014400000000000002440000000000000244000000000000024400000000000003e4000000000000034400000000000804140040000000000000000003e4000000000000034400000000000003440000000000000394000000000000034400000000000002e400000000000003e4000000000000034400103000000020000000500000000000000008041400000000000002440000000000000244000000000000034400000000000002e40000000000000444000000000008046400000000000804640000000000080414000000000000024400400000000000000000034400000000000003e40000000000080414000000000008041400000000000003e40000000000000344000000000000034400000000000003e40010200000002000000000000000000104000000000000018400000000000001c400000000000002440')

>>> data = binascii.unhexlify(data)

>>> poly = load_wkb(data)

>>> print(poly)
GeometryCollection(wkb_id=7, geometries=[MultiPoint(wkb_id=4, points=[Point(wkb_id=1, x=10.0, y=40.0), Point(wkb_id=1, x=40.0, y=30.0), Point(wkb_id=1, x=20.0, y=20.0), Point(wkb_id=1, x=30.0, y=10.0)]), MultiLineString(wkb_id=5, linestrings=[LineString(wkb_id=2, points=[Point(wkb_id=1, x=10.0, y=10.0), Point(wkb_id=1, x=20.0, y=20.0), Point(wkb_id=1, x=10.0, y=40.0)]), LineString(wkb_id=2, points=[Point(wkb_id=1, x=40.0, y=40.0), Point(wkb_id=1, x=30.0, y=30.0), Point(wkb_id=1, x=40.0, y=20.0), Point(wkb_id=1, x=30.0, y=10.0)])]), Point(wkb_id=1, x=4.0, y=6.0), MultiPolygon(wkb_id=6, polygons=[Polygon(wkb_id=3, rings=[LineString(wkb_id=2, points=[Point(wkb_id=1, x=40.0, y=40.0), Point(wkb_id=1, x=20.0, y=45.0), Point(wkb_id=1, x=45.0, y=30.0), Point(wkb_id=1, x=40.0, y=40.0)])]), Polygon(wkb_id=3, rings=[LineString(wkb_id=2, points=[Point(wkb_id=1, x=20.0, y=35.0), Point(wkb_id=1, x=45.0, y=20.0), Point(wkb_id=1, x=30.0, y=5.0), Point(wkb_id=1, x=10.0, y=10.0), Point(wkb_id=1, x=10.0, y=30.0), Point(wkb_id=1, x=20.0, y=35.0)]), LineString(wkb_id=2, points=[Point(wkb_id=1, x=30.0, y=20.0), Point(wkb_id=1, x=20.0, y=25.0), Point(wkb_id=1, x=20.0, y=15.0), Point(wkb_id=1, x=30.0, y=20.0)])])]), Polygon(wkb_id=3, rings=[LineString(wkb_id=2, points=[Point(wkb_id=1, x=35.0, y=10.0), Point(wkb_id=1, x=10.0, y=20.0), Point(wkb_id=1, x=15.0, y=40.0), Point(wkb_id=1, x=45.0, y=45.0), Point(wkb_id=1, x=35.0, y=10.0)]), LineString(wkb_id=2, points=[Point(wkb_id=1, x=20.0, y=30.0), Point(wkb_id=1, x=35.0, y=35.0), Point(wkb_id=1, x=30.0, y=20.0), Point(wkb_id=1, x=20.0, y=30.0)])]), LineString(wkb_id=2, points=[Point(wkb_id=1, x=4.0, y=6.0), Point(wkb_id=1, x=7.0, y=10.0)])])

>>> poly_data = dump_wkb(poly)

>>> poly_data = binascii.hexlify(poly_data)

>>> print(poly_data)
b'010700000006000000010400000004000000010100000000000000000024400000000000004440010100000000000000000044400000000000003e4001010000000000000000003440000000000000344001010000000000000000003e400000000000002440010500000002000000010200000003000000000000000000244000000000000024400000000000003440000000000000344000000000000024400000000000004440010200000004000000000000000000444000000000000044400000000000003e400000000000003e40000000000000444000000000000034400000000000003e40000000000000244001010000000000000000001040000000000000184001060000000200000001030000000100000004000000000000000000444000000000000044400000000000003440000000000080464000000000008046400000000000003e40000000000000444000000000000044400103000000020000000600000000000000000034400000000000804140000000000080464000000000000034400000000000003e4000000000000014400000000000002440000000000000244000000000000024400000000000003e4000000000000034400000000000804140040000000000000000003e4000000000000034400000000000003440000000000000394000000000000034400000000000002e400000000000003e4000000000000034400103000000020000000500000000000000008041400000000000002440000000000000244000000000000034400000000000002e40000000000000444000000000008046400000000000804640000000000080414000000000000024400400000000000000000034400000000000003e40000000000080414000000000008041400000000000003e40000000000000344000000000000034400000000000003e40010200000002000000000000000000104000000000000018400000000000001c400000000000002440'
